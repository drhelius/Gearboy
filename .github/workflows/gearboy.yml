name: Build and Release

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '.vscode/**'
      - '.devcontainer/**'
  pull_request:
  schedule:
    - cron: '0 0 * * 0'

env:
  NAME_LOWER: gearboy
  NAME_UPPER: Gearboy

jobs:
  linux:
    name: Linux
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Update OS
      run: sudo apt-get update -qq
    - name: Install dependencies
      run: sudo apt-get install -y libsdl2-dev libgtk-3-dev
    - name: Get build number
      run: |
        echo "BUILD_NUMBER=$(git describe --abbrev=7 --dirty --always --tags)" >> $GITHUB_ENV
    - name: make
      run: make
      working-directory: platforms/linux
    - name: Prepare artifact directory
      run: |
        mkdir -p artifact
        cp platforms/README.txt artifact
        cp platforms/gamecontrollerdb.txt artifact
        cp platforms/linux/${{ env.NAME_LOWER }} artifact
    - name: Archive binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.NAME_UPPER }}-${{ env.BUILD_NUMBER }}-${{ matrix.os }}.zip
        path: artifact/*
  linux-clang:
    name: Linux (Clang/LLVM)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Update OS
      run: sudo apt-get update -qq
    - name: Install dependencies
      run: sudo apt-get install -y libsdl2-dev libgtk-3-dev
    - name: Get build number
      run: |
        echo "BUILD_NUMBER=$(git describe --abbrev=7 --dirty --always --tags)" >> $GITHUB_ENV
    - name: make
      run: make
      working-directory: platforms/linux
      env:
        USE_CLANG: 1
  libretro:
    name: Libretro (ubuntu)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Get build number
      run: |
        echo "BUILD_NUMBER=$(git describe --abbrev=7 --dirty --always --tags)" >> $GITHUB_ENV
    - name: make
      run: make
      working-directory: platforms/libretro
    - name: Archive binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.NAME_UPPER }}-${{ env.BUILD_NUMBER }}-libretro-linux.zip
        path: platforms/libretro/${{ env.NAME_LOWER }}_libretro.so
  macos:
    name: macOS
    strategy:
      matrix:
        os: [macos-13, macos-14]
        include:
        - os: macos-13
          architecture: intel
        - os: macos-14
          architecture: arm
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: brew install sdl2
    - name: Get build number
      run: |
        echo "BUILD_NUMBER=$(git describe --abbrev=7 --dirty --always --tags)" >> $GITHUB_ENV
    - name: make
      run: make dist
      working-directory: platforms/macos
    - name: Codesign app bundle
      if: github.event_name != 'pull_request' && github.repository_owner == 'drhelius'
      env:
        MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

        security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

        codesign -v -f -o runtime --sign "$MACOS_CERTIFICATE_NAME" ${{ env.NAME_UPPER }}.app/Contents/MacOS/gamecontrollerdb.txt
        codesign -v -f -o runtime --entitlements "app.entitlements" --sign "$MACOS_CERTIFICATE_NAME" ${{ env.NAME_UPPER }}.app/Contents/MacOS/${{ env.NAME_LOWER }}
        codesign -v -f -o runtime --sign "$MACOS_CERTIFICATE_NAME" ${{ env.NAME_UPPER }}.app

        codesign -v -vvv --deep "${{ env.NAME_UPPER }}.app"
      working-directory: platforms/macos
    - name: Notarize app bundle
      if: github.event_name != 'pull_request' && github.repository_owner == 'drhelius'
      env:
        PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
        PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
        PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
      run: |
        xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
        ditto -c -k --keepParent "${{ env.NAME_UPPER }}.app" "notarization.zip"
        xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
        xcrun stapler staple "${{ env.NAME_UPPER }}.app"
        spctl -a -vvv -t install "${{ env.NAME_UPPER }}.app"
      working-directory: platforms/macos
    - name: Prepare artifact directory
      run: |
        mkdir -p artifact
        cp platforms/README.txt artifact/
        ditto -c -k --keepParent platforms/macos/"${{ env.NAME_UPPER }}.app" platforms/macos/"${{ env.NAME_UPPER }}.app.zip"
        mv platforms/macos/${{ env.NAME_UPPER }}.app.zip artifact/
    - name: Archive binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.NAME_UPPER }}-${{ env.BUILD_NUMBER }}-macos-${{ matrix.architecture }}.zip
        path: artifact/*
  windows:
    name: Windows
    strategy:
      matrix:
        architecture: [x64, arm64]
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v2
    - name: Get build number
      shell: bash
      run: |
        echo "BUILD_NUMBER=$(git describe --abbrev=7 --dirty --always --tags)" >> $GITHUB_ENV
    - name: msbuild
      run: msbuild ${{ env.NAME_UPPER }}.sln /t:Clean,Build /p:EmulatorBuild="${{ env.BUILD_NUMBER }}" /p:Configuration=Release /p:Platform=${{ matrix.architecture }}
      working-directory: platforms/windows
    - name: Prepare artifact directory
      run: |
        mkdir -p artifact
        cp platforms/README.txt artifact
        cp platforms/gamecontrollerdb.txt artifact
        cp platforms/windows/dependencies/SDL2-2.30.6/lib/${{ matrix.architecture }}/SDL2.dll artifact
        cp platforms/windows/release/${{ env.NAME_UPPER }}.exe artifact
    - name: Archive binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.NAME_UPPER }}-${{ env.BUILD_NUMBER }}-windows-${{ matrix.architecture }}.zip
        path: artifact/*
  bsd:
    name: BSD
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Get build number
      run: |
        echo "BUILD_NUMBER=$(git describe --abbrev=7 --dirty --always --tags)" >> $GITHUB_ENV
    - name: Run FreeBSD and gmake
      id: test
      uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        prepare: pkg install -y git gmake pkgconf SDL2 lang/gcc gtk3
        run: |
          cd platforms/bsd
          gmake
    - name: Prepare artifact directory
      run: |
        mkdir -p artifact
        cp platforms/README.txt artifact
        cp platforms/gamecontrollerdb.txt artifact
        cp platforms/bsd/${{ env.NAME_LOWER }} artifact
    - name: Archive binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.NAME_UPPER }}-${{ env.BUILD_NUMBER }}-bsd.zip
        path: artifact/*
  release:
    name: Release
    needs: [linux, macos, windows, bsd]
    if: github.event_name != 'pull_request' && startswith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Get build number
      run: |
        echo "BUILD_NUMBER=$(git describe --abbrev=7 --dirty --always --tags)" >> $GITHUB_ENV
    - name: Prepare release directory
      run: |
        mkdir -p release
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ env.NAME_UPPER }}-${{ env.BUILD_NUMBER }}-*
        path: release
    - name: Zip directories
      run: |
        cd release
        for f in *; do
          if [ -d "$f" ]; then
            cd $f
            echo "Compressing $f"
            zip -r $f.zip *
            mv $f.zip ../
            cd ..
          fi
        done
    - name: Create release
      run: |
        gh release create ${{ github.ref_name }} ./release/*.zip \
          --title "${{ env.NAME_UPPER }} ${{ github.ref_name }}" \
          --draft \
          --generate-notes
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
